/** Common collection functionality across all B3MB instances
 *  Specifically:
 *    Establish connectivity to the CAN Bus
 *    Common collection subroutines
 */
%{
  #include "subbuspp.h"
  #include "alpha-sb_can.h"
  #define disarm_sic()
  #define tick_sic()

  /* These have moved to CAN.oui */
  /* subbuspp *CAN;
     bool CAN_Initialized = false; */
  typedef struct {
    subbus_mread_req *req;
    uint16_t bdid;
    uint16_t start;
    uint16_t nwords;
    uint16_t *rvals;
    bool saw_nack;
    const char *reason;
  } B3MB_mread_t;

  /* Assume all B3MBs need to read the same data:
   * 0x20:1:0x35 (22 words)
   * 0x40,0x41 (2 more words)
   */
  static subbus_mread_req *B3MB_mread_setup(subbuspp *P, uint16_t bdid) {
    uint16_t start = 0x20;
    uint16_t n_reads1 = 22;
    uint16_t n_reads = n_reads1 + 2;
    uint16_t bdid_hi = bdid<<8;
    char mreqstr[30];
    snprintf(mreqstr, 30, "%X:1:%X,%X,%X", bdid_hi | start,
      bdid_hi | (start+n_reads1-1), bdid_hi|0x40, bdid_hi|0x41);
    subbus_mread_req *mreq = P->pack_mread_request(n_reads, mreqstr);
    return mreq;
  }

  subbus_mread_req *B3MB_sequential_mread(subbuspp *P, uint16_t bdid,
          uint16_t start, uint16_t n_reads) {
    uint16_t bdid_hi = bdid<<8;
    char mreqstr[30];
    snprintf(mreqstr, 30, "%X:1:%X", bdid_hi | start, bdid_hi | (start+n_reads-1));
    subbus_mread_req *mreq = P->pack_mread_request(n_reads, mreqstr);
    return mreq;
  }

  static B3MB_mread_t *B3MB_mread_init(uint16_t bdid, uint16_t start) {
    B3MB_mread_t *B3MBmr = (B3MB_mread_t*)new_memory(sizeof(B3MB_mread_t));
    B3MBmr->req = B3MB_mread_setup(B3MB, bdid);
    B3MBmr->bdid = bdid;
    B3MBmr->start = start;
    B3MBmr->nwords = B3MBmr->req->n_reads;
    B3MBmr->saw_nack = false;
    B3MBmr->reason = "success";
    B3MBmr->rvals = (uint16_t*)new_memory(B3MBmr->nwords * sizeof(uint16_t));
    return B3MBmr;
  }
  
  static bool B3MB_mread(B3MB_mread_t *B3MBmr) {
    if (!B3MB_Initialized) return false;
    uint16_t nwords;
    int rv = B3MB->mread_subbus_nw(B3MBmr->req, &(B3MBmr->rvals[0]), &nwords);
    if (rv < 0) {
      if (!B3MBmr->saw_nack) {
        msg(2, "mread_subbus_nw(B3MB%d) returned error %d", B3MBmr->bdid, rv);
        B3MBmr->saw_nack = true;
      }
      B3MBmr->reason = "error";
      return false;
    }
    if (nwords != B3MBmr->nwords) {
      if (!B3MBmr->saw_nack) {
        msg(2, "mread_subbus_nw(B3MB%d) returned %d words, expected %d",
          B3MBmr->bdid, nwords, B3MBmr->nwords);
        B3MBmr->saw_nack = true;
      }
      B3MBmr->reason = "invalid wordcount";
      return false;
    }
    switch (rv) {
      case SBS_ACK:
        if (B3MBmr->saw_nack) {
          msg(0, "B3MB ID:%d recovered from %s", B3MBmr->bdid, B3MBmr->reason);
          B3MBmr->saw_nack = false;
        }
        return true;
      case SBS_NOACK:
        if (!B3MBmr->saw_nack) {
          msg(2, "B3MB ID: %d reported NACK on read: %d-%d",
              B3MBmr->bdid, B3MBmr->start, B3MBmr->start+B3MBmr->nwords-1);
          B3MBmr->saw_nack = true;
          B3MBmr->reason = "NACK";
        }
        return true;
      default:
        if (!B3MBmr->saw_nack) {
          msg(2, "B3MB ID:%d unexpected return code %d",
              B3MBmr->bdid, rv);
          B3MBmr->saw_nack = true;
        }
        B3MBmr->reason = "unexpected return";
        return true;
    }
  }
  
  /*
  void CAN_init() {
    if (!CAN) {
      CAN = new subbuspp("B3MB", "CAN");
      int subfunc = CAN->load();
      if (subfunc > 0) {
        msg(0, "CAN subbusd reported subfunction %d", subfunc);
        CAN_Initialized = true;
      } else {
        msg(MSG_ERROR, "CAN subbusd load failed: %d", subfunc);
      }
    }
  }
  */

  typedef struct {
    uint16_t n_words;
    char name[0x50];
  } device_name_t;

  void B3MB_identify_board(uint8_t bdid) {
    if (!B3MB_Initialized) {
      msg(MSG_ERROR, "B3MB CAN ID %d not initialized", bdid);
      return;
    }
    uint16_t bdid_hi = bdid<<8;
    // msg(0,"read_ack(0x%02X03)", bdid);
    uint16_t values[4];
    uint16_t nread;
    subbus_mread_req *mreq = B3MB_sequential_mread(B3MB, bdid, 0x02, 4);
    B3MB->mread_subbus_nw(mreq, values, &nread);
    // msg(0, "  Board ID:%d Build:%d S/N:%d Instrument:%d",
    //   values[0], values[1], values[2], values[3]);
    free_memory(mreq);
    
    char mreqstr[30];
    snprintf(mreqstr, 30, "%X|28@%X", bdid_hi|8, bdid_hi|9);
    mreq = B3MB->pack_mread_request(0x29, mreqstr);
    device_name_t devname;
    int rv = B3MB->mread_subbus_nw(mreq, (uint16_t*)&devname, &nread);
    if (rv < 0) {
      msg(2, "Error %d from mread", rv);
    } else {
      msg(0, " '%s' Build %d", &devname.name[0], values[1]);
    }
    free_memory(mreq);
  }
  
  bool B3MB_update_int(uint16_t *LV, B3MB_mread_t *R, int idx) {
    int16_t val = R->rvals[idx];
    if (val || (!R->saw_nack)) {
      *LV = val;
      return true;
    }
    return false;
  }
  
  #define B3MB_update(LV,R,I) B3MB_update_int((uint16_t *)&LV,R,I)
%}
