/** Common collection functionality across all B3MB instances
 *  Specifically:
 *    Establish connectivity to the CAN Bus
 *    Common collection subroutines
 */
%{
  #include "subbuspp.h"
  #define disarm_sic()
  #define tick_sic()

  subbuspp *CAN;
  bool CAN_Initialized = false;
  typedef struct {
    subbus_mread_req *req;
    uint16_t bdid;
    uint16_t start;
    uint16_t nwords;
    uint16_t *rvals;
    bool saw_nack;
    const char *reason;
  } B3MB_mread_t;

  /* Assume all B3MBs need to read the same data:
   * 0x20:1:0x35 (22 words)
   * 0x40,0x41 (2 more words)
   */
  static subbus_mread_req *B3MB_mread_setup(subbuspp *P, uint16_t bdid) {
    uint16_t start = 0x20;
    uint16_t n_reads1 = 22;
    uint16_t n_reads = n_reads1 + 2;
    uint16_t bdid_hi = bdid<<8;
    char mreqstr[30];
    snprintf(mreqstr, 30, "%X:1:%X,%X,%X", bdid_hi | start,
      bdid_hi | (start+n_reads1-1), 0x40, 0x41);
    subbus_mread_req *mreq = P->pack_mread_request(n_reads, mreqstr);
    return mreq;
  }

  subbus_mread_req *CAN_sequential_mread(subbuspp *P, uint16_t bdid,
          uint16_t start, uint16_t n_reads) {
    uint16_t bdid_hi = bdid<<8;
    char mreqstr[30];
    snprintf(mreqstr, 30, "%X:1:%X", bdid_hi | start, bdid_hi | (start+n_reads-1));
    subbus_mread_req *mreq = P->pack_mread_request(n_reads, mreqstr);
    return mreq;
  }

  static B3MB_mread_t *B3MB_mread_init(uint16_t bdid, uint16_t start) {
    B3MB_mread_t *B3MB = (B3MB_mread_t*)new_memory(sizeof(B3MB_mread_t));
    B3MB->req = B3MB_mread_setup(CAN, bdid);
    B3MB->bdid = bdid;
    B3MB->start = start;
    B3MB->nwords = B3MB->req->n_reads;
    B3MB->saw_nack = false;
    B3MB->reason = "success";
    B3MB->rvals = (uint16_t*)new_memory(B3MB->nwords * sizeof(uint16_t));
    return B3MB;
  }
  
  static bool B3MB_mread(B3MB_mread_t *B3MB) {
    if (!CAN_Initialized) return false;
    uint16_t nwords;
    int rv = CAN->mread_subbus_nw(B3MB->req, &(B3MB->rvals[0]), &nwords);
    if (rv < 0) {
      if (!B3MB->saw_nack) {
        msg(2, "mread_subbus_nw(B3MB%d) returned error %d", B3MB->bdid, rv);
        B3MB->saw_nack = true;
      }
      B3MB->reason = "error";
      return false;
    }
    if (nwords != B3MB->nwords) {
      if (!B3MB->saw_nack) {
        msg(2, "mread_subbus_nw(B3MB%d) returned %d words, expected %d",
          B3MB->bdid, nwords, B3MB->nwords);
        B3MB->saw_nack = true;
      }
      B3MB->reason = "invalid wordcount";
      return false;
    }
    switch (rv) {
      case SBS_ACK:
        if (B3MB->saw_nack) {
          msg(0, "B3MB ID:%d recovered from %s", B3MB->bdid, B3MB->reason);
          B3MB->saw_nack = false;
        }
        return true;
      case SBS_NOACK:
        if (!B3MB->saw_nack) {
          msg(2, "B3MB ID: %d reported NACK on read: %d-%d",
              B3MB->bdid, B3MB->start, B3MB->start+B3MB->nwords-1);
          B3MB->saw_nack = true;
          B3MB->reason = "NACK";
        }
        return true;
      default:
        if (!B3MB->saw_nack) {
          msg(2, "B3MB ID:%d unexpected return code %d",
              B3MB->bdid, rv);
          B3MB->saw_nack = true;
        }
        B3MB->reason = "unexpected return";
        return true;
    }
  }
  
  void CAN_init() {
    if (!CAN) {
      CAN = new subbuspp("subbusd", "CAN");
      int subfunc = CAN->load();
      if (subfunc > 0) {
        msg(0, "CAN subbusd reported subfunction %d", subfunc);
        CAN_Initialized = true;
      } else {
        msg(MSG_ERROR, "CAN subbusd load failed: %d", subfunc);
      }
    }
  }

  typedef struct {
    uint16_t n_words;
    char name[0x50];
  } device_name_t;

  void CAN_identify_board(uint8_t bdid) {
    if (!CAN_Initialized) CAN_init();
    uint16_t bdid_hi = bdid<<8;
    // msg(0,"read_ack(0x%02X03)", bdid);
    uint16_t values[4];
    uint16_t nread;
    subbus_mread_req *mreq = CAN_sequential_mread(CAN, bdid, 0x05, 4);
    CAN->mread_subbus_nw(mreq, values, &nread);
    msg(0, "  Board ID:%d Build:%d S/N:%d Instrument:%d",
      values[0], values[1], values[2], values[3]);
    free_memory(mreq);
    
    char mreqstr[30];
    snprintf(mreqstr, 30, "%X|28@%X", bdid_hi|8, bdid_hi|9);
    mreq = CAN->pack_mread_request(0x29, mreqstr);
    device_name_t devname;
    int rv = CAN->mread_subbus_nw(mreq, (uint16_t*)&devname, &nread);
    if (rv < 0) {
      msg(2, "Error %d from mread", rv);
    } else {
      msg(0, "nr:%u/%u '%s'", nread, devname.n_words, &devname.name[0]);
    }
    free_memory(mreq);
  }
%}
