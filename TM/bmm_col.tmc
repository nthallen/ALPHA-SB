%{
  subbuspp *CAN;
  typedef struct {
    subbus_mread_req *req;
    uint16_t bdid;
    uint16_t start;
    uint16_t nwords;
    bool saw_nack;
    const char *reason;
  } bmm_mread_t;
  bmm_mread_t *BMM_mreq1;
  bmm_mread_t *BMM_mreq2;
  bmm_mread_t *BMM_mreq3;
  uint16_t BMM_rvals[8];

  subbus_mread_req *CAN_sequential_mread(subbuspp *P, uint16_t bdid, uint16_t start, uint16_t n_reads) {
    uint16_t bdid_hi = bdid<<8;
    char mreqstr[30];
    snprintf(mreqstr, 30, "%X:1:%X", bdid_hi | start, bdid_hi | (start+n_reads-1));
    subbus_mread_req *mreq = P->pack_mread_request(n_reads, mreqstr);
    return mreq;
  }
  
  bmm_mread_t *BMM_mread_init(uint16_t bdid, uint16_t start, uint16_t n_reads) {
    bmm_mread_t *bmm = (bmm_mread_t*)new_memory(sizeof(bmm_mread_t));
    bmm->req = CAN_sequential_mread(CAN, bdid, start, n_reads);
    bmm->bdid = bdid;
    bmm->start = start;
    bmm->nwords = n_reads;
    bmm->saw_nack = false;
    bmm->reason = "success";
    return bmm;
  }
  
  bool bmm_mread(bmm_mread_t *bmm) {
    uint16_t nwords;
    int rv = CAN->mread_subbus_nw(bmm->req, &BMM_rvals[0], &nwords);
    if (rv < 0) {
      msg(2, "mread_subbus_nw(bmm%d) returned error %d", bmm->bdid, rv);
      bmm->saw_nack = true;
      bmm->reason = "error";
      return false;
    }
    if (nwords != bmm->nwords) {
      msg(2, "mread_subbus_nw(bmm%d) returned %d words, expected %d", bmm->bdid, nwords, bmm->nwords);
      bmm->saw_nack = true;
      bmm->reason = "invalid wordcount";
      return false;
    }
    switch (rv) {
      case SBS_ACK:
        if (bmm->saw_nack) {
          msg(0, "BMM ID:%d recovered from %s", bmm->bdid, bmm->reason);
          bmm->saw_nack = false;
        }
        return true;
      case SBS_NOACK:
        if (!bmm->saw_nack) {
          msg(2, "BMM reported NACK on read from ID:%d %d-%d",
              bmm->bdid, bmm->start, bmm->start+bmm->nwords-1);
          bmm->saw_nack = true;
          bmm->reason = "NACK";
        }
        return true;
      default:
        if (!bmm->saw_nack) {
          msg(2, "BMM ID:%d unexpected return code %d",
              bmm->bdid, rv);
          bmm->saw_nack = true;
          bmm->reason = "unexpected return";
        }
        return true;
    }
  }
  
  typedef struct {
    uint16_t n_words;
    char name[0x50];
  } device_name_t;
  
  void identify_board(uint8_t bdid) {
    uint16_t bdid_hi = bdid<<8;
    // msg(0,"read_ack(0x%02X03)", bdid);
    uint16_t values[4];
    uint16_t nread;
    subbus_mread_req *mreq = CAN_sequential_mread(CAN, bdid, 0x05, 4);
    CAN->mread_subbus_nw(mreq, values, &nread);
    msg(0, "  Board ID:%d Build:%d S/N:%d Instrument:%d", values[0], values[1], values[2], values[3]);
    free_memory(mreq);
    
    char mreqstr[30];
    snprintf(mreqstr, 30, "%X|28@%X", bdid_hi|8, bdid_hi|9);
    mreq = CAN->pack_mread_request(0x29, mreqstr);
    device_name_t devname;
    int rv = CAN->mread_subbus_nw(mreq, (uint16_t*)&devname, &nread);
    if (rv < 0) {
      msg(2, "Error %d from mread", rv);
    } else {
      msg(0, "nr:%u/%u '%s'", nread, devname.n_words, &devname.name[0]);
    }
    free_memory(mreq);
  }
  
  void CAN_init() {
    CAN = new subbuspp("subbusd", "CAN");
    CAN->load();
    identify_board(1);
    identify_board(2);
    identify_board(3);
    BMM_mreq1 = BMM_mread_init(1, 0x21, 8);
    BMM_mreq2 = BMM_mread_init(2, 0x21, 8);
    BMM_mreq3 = BMM_mread_init(3, 0x21, 8);
  }
%}
TM INITFUNC CAN_init();
