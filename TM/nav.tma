
%{
  /*
    Feed Forward partition, hand-coded in TMC to escape TMA 1 Hz resolution.
    Inputs:
      Nav_dThrust_pct
      Nav_Dur
      Nav_Spacing
   */
%}

{ STATE (FF_idle, FF_init, FF_accel, FF_coast, FF_decel);
  int16_t FF_T_acc, FF_T_rot, FF_count;
  double FF_dThrust;
  depending on (PMC_Left_RPM, FF_init) {
    FF_count = FF_T_acc;
    nav_set_rpm_dth(FF_dThrust);
    Validate FF_accel;
  }
  depending on (PMC_Left_RPM, FF_accel) {
    if (FF_count <= 0) {
      nav_set_rpm_dth(0);
      FF_count = FF_T_rot;
      Validate FF_coast;
    } else {
      FF_count -= 5;
    }
  }
  depending on (PMC_Left_RPM, FF_coast) {
    if (FF_count <= 0) {
      nav_set_rpm_dth(-FF_dThrust);
      FF_count = FF_T_acc;
      Validate FF_decel;
    } else {
      FF_count -= 5;
    }
  }
  depending on (PMC_Left_RPM, FF_decel) {
    if (FF_count <= 0) {
      nav_set_rpm_dth(0);
      FF_count = 0;
      Validate FF_idle;
    } else {
      FF_count -= 5;
    }
  }
}

{ nav_set_gains(Nav_PGain, Nav_IGain, Nav_Dgain); }
{ nav_set_course(Nav_Course, Nav_Thrust_pct); }

Partition

State heading_idle {
  > _Set Nav Status Idle
}

State heading_PID {
  > _Set Nav Status PID
  { nav_set_rpm_pid(heading); }
}

%{ /*
    heading_FF makes a single rotation based on the local variable
    FF_dThrust, FF_Dur.
 */
%}

State heading_FF {
      > _Set Nav Status FF_Init
      { FF_T_acc = Nav_T_acc;
        FF_T_rot = Nav_T_rot;
        /* FF_dThrust = nav_pct_2_thrust(Nav_dThrust_pct); */
        Validate FF_init;
      }
      Hold until valid (FF_accel) or 10
      else Validate heading_FF_fail;
      Hold until valid (FF_idle) or 60
      else Validate heading_FF_fail;
      > _Set Nav Status FF_Pause
  
  +10 { FF_dThrust = -FF_dThrust;
        Validate FF_init;
      }
      Hold until valid (FF_accel) or 10
      else Validate heading_FF_fail;
      Hold until valid (FF_idle) or 60
      else Validate heading_FF_fail;
      > _Set Nav Status FF_Done
      { FF_dThrust = -FF_dThrust; }

  +10 Validate heading_PID;
}

State heading_FF_fail {
  > _Set Nav Status Fail
  { msg(MSG_ERROR, "heading_FF_fail: count=%d", FF_count); }
}

State heading_Port_1 {
      > _Set Nav Status Port1
   +1 { FF_T_acc = Nav_T_acc;
        FF_T_rot = Nav_T_rot;
        FF_count = 0;
        FF_dThrust = -nav_pct_2_thrust(Nav_dThrust_pct);
        Validate FF_coast;
      }
   +1 Hold until valid (FF_idle) or 60
      else Validate heading_FF_fail;
      Validate heading_Idle;
}

State heading_Starboard_1 {
      > _Set Nav Status Stbd1
   +1 { FF_T_acc = Nav_T_acc;
        FF_T_rot = Nav_T_rot;
        FF_count = 0;
        FF_dThrust = nav_pct_2_thrust(Nav_dThrust_pct);
        Validate FF_coast;
      }
   +1 Hold until valid (FF_idle) or 60
      else Validate heading_FF_fail;
      Validate heading_Idle;
}

State heading_Port_2 {
      > _Set Nav Status Port2
   +1 { FF_T_acc = Nav_T_acc;
        FF_T_rot = Nav_T_rot;
        FF_dThrust = nav_pct_2_thrust(Nav_dThrust_pct);
        Validate FF_init;
      }
   +1 Hold until valid (FF_idle) or 60
      else Validate heading_FF_fail;
      Validate heading_Idle;
}

State heading_Starboard_2 {
      > _Set Nav Status Stbd2
   +1 { FF_T_acc = Nav_T_acc;
        FF_T_rot = Nav_T_rot;
        FF_dThrust = -nav_pct_2_thrust(Nav_dThrust_pct);
        Validate FF_init;
      }
   +1 Hold until valid (FF_idle) or 60
      else Validate heading_FF_fail;
      Validate heading_Idle;
}

State heading_Stop {
  Validate FF_idle;
  > _Set Nav Status Stop
  > Set Nav Thrust 0 pct
  > Set Nav dThrust 0 pct
  { nav_set_rpm_dth(0);
    Validate heading_idle;
  }
}

State heading_Hard_Stop {
  Validate FF_idle;
  > _Set Nav Status HardStop
  > Set Nav Thrust 0 pct
  > Set Nav dThrust 0 pct
  > PMC Left Bridge Disable
  > PMC Right Bridge Disable
  Validate heading_idle;
}

Partition

State survey_idle {}

%{ double FF_dThrust0 = nav_pct_2_thrust(1);
   double FF_ddThrust = nav_pct_2_thrust(1);
   double FF_dThrust1 = nav_pct_2_thrust(10);
%}

State survey_init {
  { FF_dThrust = FF_dThrust0; }

  Validate heading_PID;
  +10
  Hold until (convert(angular_velocity_z) < 0.1 &&
              convert(angular_velocity_z) > -0.1 &&
              convert(heading) < 0.2 &&
              convert(heading) > -0.2) or 5:00;
  Validate survey_step;
}

State survey_step {
  { msg(0, "survey_step: dThrust:%.1lf ddThrust=%.1lf",
        FF_dThrust, FF_ddThrust);
  }
  Validate heading_FF;
  Hold until valid (heading_FF) or 10;
  Hold until valid (heading_PID);
  Hold until (convert(angular_velocity_z) < 0.1 &&
              convert(angular_velocity_z) > -0.1 &&
              convert(heading) < 0.2 &&
              convert(heading) > -0.2) or 5:00;
  { FF_dThrust += FF_ddThrust;
    if (FF_dThrust > FF_dThrust1) {
      Validate survey_idle;
    } else Validate survey_step;
  }
}
