%{
  /* Things to include here:
   *   nav_drift
   *   filter statuses:
   *     Initializations
   *       Orientation: yes/no
   *       Navigation: yes/no
   *       Heading:  yes/no
   *       UTC_Time:  yes/no
   *     GNSS Fix Status:
   *       0: None
   *       1: 2D
   *       2: 3D
   *       3: SBAS
   *       4: Diff
   *       5: Omni
   *       6: RTKflt
   *       7: RTKfix
   *     Internal GNSS: Enabled/Disabled
   *     Dual Antenna Heading: Active/Inactive
   *     Amospheric Altitude: Enabled/Disabled
   */
  #define SD_yesno(x) ((x)?"yes":" no")
  #define SD_en_dis(x) ((x)?" Enabled":"Disabled")
  #define SD_act_inact(x) ((x)?"  Active":"Inactive")
  
  const char *SD_fix_text(uint8_t fix) {
    switch (fix&7) {
      case 0: return "  None";
      case 1: return "    2D";
      case 2: return "    3D";
      case 3: return "  SBAS";
      case 4: return "  Diff";
      case 5: return "  Omni";
      case 6: return "RTKflt";
      case 7: return "RTKfix";
      default: break;
    }
    return "******";
  }
  
  double lat0, lon0;
%}
TM typedef double nav_drift_t { text "%9.6le"; }
nav_drift_t nav_drift; Invalidate nav_drift;
  { if (SD_stale == 0) {
      nav_drift = (unix_seconds > 100000) ?
        (dtime() - unix_seconds - microseconds*1e-6) : 0;
    }
    Validate nav_drift;
  }

TM typedef uint8_t SD_yesno_t { text "%3u" SD_yesno(); }

SD_yesno_t orient_init; Invalidate orient_init;
  { orient_init = (filter_status>>0)&1; Validate orient_init; }
SD_yesno_t nav_init; Invalidate nav_init;
  { nav_init = (filter_status>>1)&1; Validate nav_init; }
SD_yesno_t heading_init; Invalidate heading_init;
  { heading_init = (filter_status>>2)&1; Validate heading_init; }
SD_yesno_t UTC_time_init; Invalidate UTC_time_init;
  { UTC_time_init = (filter_status>>3)&1; Validate UTC_time_init; }

TM typedef uint8_t SD_fix_t { text "%6u" SD_fix_text(); }
SD_fix_t GNSS_fix; Invalidate GNSS_fix;
  { GNSS_fix = (filter_status>>4)&7; Validate GNSS_fix; }

TM typedef uint8_t SD_endis_t { text "%8u" SD_en_dis(); }
SD_endis_t Int_GNSS_en; Invalidate Int_GNSS_en;
  { Int_GNSS_en = (filter_status>>9)&1; Validate Int_GNSS_en; }
SD_endis_t Atm_Alt_en; Invalidate Atm_Alt_en;
  { Atm_Alt_en = (filter_status>>9)&12; Validate Atm_Alt_en; }

TM typedef uint8_t SD_active_t { text "%8u" SD_act_inact(); }
SD_active_t Dual_Ant_active; Invalidate Dual_Ant_active;
  { Dual_Ant_active = (filter_status>>10)&12; Validate Dual_Ant_active; }

SD_meters north_m; Invalidate north_m;
SD_meters east_m; Invalidate east_m;
{ if (lat0 == 0 && lon0 == 0) {
    lat0 = latitude;
    lon0 = latitude;
  }
  north_m = (latitude-lat0)*(180/3.14159265389)*111139;
  east_m = (longitude-lon0)*(180/3.14159265389)*111139*cos(latitude);
  Validate north_m;
  Validate east_m;
}
