%{
%}
TM "Receive" SpatialDual 1;

TM typedef uint16_t SDstat_t { text "%04X"; }
TM typedef uint32_t SDtime_t { text "%12d"; }
TM typedef double SD_d_angle_t { text "%10.5lf"; }
TM typedef double SDalt_t { text "%9.3lf"; }
TM typedef double SD_f_angle_t { text "%10.5lf"; }
TM typedef float SD_vel_t { text "%8.3f"; }
TM typedef float SD_acc_t { text "%8.4f"; }
TM typedef uint8_t SD_stale_t { text "%3u"; }
TM typedef uint16_t SD_nc_t { text "%5u"; }

TM 10 Hz SDstat_t system_status;
TM 10 Hz SDstat_t filter_status;
TM 10 Hz SDtime_t unix_seconds;
TM 10 Hz SDtime_t microseconds;
TM 10 Hz SD_d_angle_t latitude;
TM 10 Hz SD_d_angle_t longitude;
TM 10 Hz SDalt_t height;
TM 10 Hz SD_vel_t velocity_north;
TM 10 Hz SD_vel_t velocity_east;
TM 10 Hz SD_vel_t velocity_down;
TM 10 Hz SD_acc_t body_accel_x;
TM 10 Hz SD_acc_t body_accel_y;
TM 10 Hz SD_acc_t body_accel_z;
TM 10 Hz SD_acc_t g_force;
TM 10 Hz SD_f_angle_t roll;
TM 10 Hz SD_f_angle_t pitch;
TM 10 Hz SD_f_angle_t heading;
TM 10 Hz SD_f_angle_t angular_velocity_x;
TM 10 Hz SD_f_angle_t angular_velocity_y;
TM 10 Hz SD_f_angle_t angular_velocity_z;
TM 10 Hz SD_f_angle_t latitude_std;
TM 10 Hz SD_f_angle_t longitude_std;
TM 10 Hz SD_f_angle_t height_std;
TM 10 Hz SD_nc_t SD_nc;
TM 10 Hz SD_stale_t SD_n_reports;
TM 10 Hz SD_stale_t SD_stale;

Group SDual (system_status, filter_status, unix_seconds,
    microseconds, latitude, longitude, height, velocity_north,
    velocity_east, velocity_down, body_accel_x, body_accel_y,
    body_accel_z, g_force, roll, pitch, heading, angular_velocity_x,
    angular_velocity_y, angular_velocity_z, latitude_std,
    longitude_std, height_std, SD_nc, SD_n_reports, SD_stale) {
  system_status = SpatialDual.SD.system_status;
  filter_status = SpatialDual.SD.filter_status;
  unix_seconds = SpatialDual.SD.unix_seconds;
  microseconds = SpatialDual.SD.microseconds;
  latitude = SpatialDual.SD.latitude;
  longitude = SpatialDual.SD.longitude;
  height = SpatialDual.SD.height;
  velocity_north = SpatialDual.SD.velocity_north;
  velocity_east = SpatialDual.SD.velocity_east;
  velocity_down = SpatialDual.SD.velocity_down;
  body_accel_x = SpatialDual.SD.body_accel_x;
  body_accel_y = SpatialDual.SD.body_accel_y;
  body_accel_z = SpatialDual.SD.body_accel_z;
  g_force = SpatialDual.SD.g_force;
  roll = SpatialDual.SD.roll;
  pitch = SpatialDual.SD.pitch;
  heading = SpatialDual.SD.heading;
  angular_velocity_x = SpatialDual.SD.angular_velocity_x;
  angular_velocity_y = SpatialDual.SD.angular_velocity_y;
  angular_velocity_z = SpatialDual.SD.angular_velocity_z;
  latitude_std = SpatialDual.SD.latitude_std;
  longitude_std = SpatialDual.SD.longitude_std;
  height_std = SpatialDual.SD.height_std;
  SD_nc = SpatialDual.nc;
  SD_stale = SpatialDual_obj->Stale(255);
  SD_n_reports = SD_stale ? 0 : SpatialDual.n_reports;
  SpatialDual_obj->synch();
}
